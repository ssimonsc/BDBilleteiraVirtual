-- MySQL Script generated by MySQL Workbench
-- Thu Apr 26 17:32:03 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema proyecto
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema proyecto
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `proyecto` DEFAULT CHARACTER SET utf8 ;
USE `proyecto` ;

-- -----------------------------------------------------
-- Table `proyecto`.`Participantes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Participantes` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Participantes` (
  `idParticipante` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idParticipante`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Espectaculos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Espectaculos` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Espectaculos` (
  `idEspectaculo` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(200) NULL,
  `tipo` VARCHAR(30) NULL,
  PRIMARY KEY (`idEspectaculo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Participa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Participa` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Participa` (
  `idParticipante` INT NOT NULL,
  `idEspectaculo` INT NOT NULL,
  PRIMARY KEY (`idParticipante`, `idEspectaculo`),
  INDEX `espectaculo_idx` (`idEspectaculo` ASC),
  CONSTRAINT `participante`
    FOREIGN KEY (`idParticipante`)
    REFERENCES `proyecto`.`Participantes` (`idParticipante`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `espectaculo_participa`
    FOREIGN KEY (`idEspectaculo`)
    REFERENCES `proyecto`.`Espectaculos` (`idEspectaculo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`TiposUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`TiposUsuario` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`TiposUsuario` (
  `tipo` VARCHAR(15) NOT NULL,
  CHECK (tipo in ('Jubilado','Adulto','Infantil','Parado', 'Beb√©')),
  PRIMARY KEY (`tipo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Recintos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Recintos` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Recintos` (
  `idRecinto` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  PRIMARY KEY (`idRecinto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Gradas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Gradas` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Gradas` (
  `idGrada` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  `numMaximoAsientos` INT NOT NULL,
  `idRecinto` INT NULL,
  PRIMARY KEY (`idGrada`),
  INDEX `idRecinto_idx` (`idRecinto` ASC),
  CONSTRAINT `idRecinto`
    FOREIGN KEY (`idRecinto`)
    REFERENCES `proyecto`.`Recintos` (`idRecinto`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Eventos` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Eventos` (
  `idEvento` INT NOT NULL AUTO_INCREMENT,
  `estado` VARCHAR(45) NULL,
  `fechaHora` DATETIME NULL,
  `limiteReserva` DATETIME NULL,
  `limiteAnulaciones` DATETIME NULL,
  `validez` INT NULL,
  `idEspectaculo` INT NULL,
  CHECK (estado in ('abierto', 'cerrado', 'finalizado')),
  PRIMARY KEY (`idEvento`),
  INDEX `espectaculo_idx` (`idEspectaculo` ASC),
  CONSTRAINT `espectaculo_eventos`
    FOREIGN KEY (`idEspectaculo`)
    REFERENCES `proyecto`.`Espectaculos` (`idEspectaculo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Clientes` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Clientes` (
  `idCliente` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NULL,
  `apellidos` VARCHAR(45) NULL,
  `datosBancarios` VARCHAR(45) NULL,
  PRIMARY KEY (`idCliente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`GradaEventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`GradaEventos` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`GradaEventos` (
  `idGrada` INT NOT NULL,
  `idEvento` INT NOT NULL,
  PRIMARY KEY (`idGrada`, `idEvento`),
  INDEX `evento_idx` (`idEvento` ASC),
  CONSTRAINT `grada`
    FOREIGN KEY (`idGrada`)
    REFERENCES `proyecto`.`Gradas` (`idGrada`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `evento`
    FOREIGN KEY (`idEvento`)
    REFERENCES `proyecto`.`Eventos` (`idEvento`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Localidades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Localidades` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Localidades` (
	`idGrada` INT NOT NULL,
  `numeroLocalidad` INT NOT NULL,
  `estado` VARCHAR(45) NULL,
  `deteriorado` TINYINT NULL,
  PRIMARY KEY (`numeroLocalidad`, `idGrada`),
  INDEX `grada_loc_idx` (`idGrada` ASC),
  CONSTRAINT `grada_loc`
    FOREIGN KEY (`idGrada`)
    REFERENCES `proyecto`.`Gradas` (`idGrada`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`LocalidadGradaEvento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS LocalidadGradaEvento;

CREATE TABLE IF NOT EXISTS `proyecto`.`LocalidadGradaEvento` (
  `numeroLocalidad` INT NOT NULL,
  `idGrada` INT NOT NULL,
  `idEvento` INT NOT NULL,
  PRIMARY KEY (`numeroLocalidad`, `idGrada`, `idEvento`),
  INDEX `grada_idx` (`idGrada` ASC),
  INDEX `evento_idx` (`idEvento` ASC),
  CONSTRAINT `evento_lge`
    FOREIGN KEY (`idEvento`, idGrada)
    REFERENCES `proyecto`.`GradaEventos` (`idEvento`, idGrada)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `grada_lge`
    FOREIGN KEY (idGrada, numeroLocalidad)
    REFERENCES `proyecto`.`Localidades` (`idGrada`, numeroLocalidad)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`Operaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`Operaciones` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`Operaciones` (
  `numeroLocalidad` INT NOT NULL,
  `idGrada` INT NOT NULL,
  `idEvento` INT NOT NULL,
  `idCliente` INT NOT NULL,
  `tipoOperacion` VARCHAR(45) NOT NULL,
  `fechaCaducidad` DATETIME NULL,
  `tipoUsuario` VARCHAR(15) NULL,
  INDEX `tipoUsuario_idx` (`tipoUsuario` ASC),
  INDEX `cliente_idx` (`idCliente` ASC),
  INDEX `grada_idx` (`idGrada` ASC),
  INDEX `localidad_idx` (`numeroLocalidad` ASC),
  INDEX `evento_idx` (`idEvento` ASC),
  CHECK (tipoOperacion in ('compra', 'reserva', 'pre-reserva')),
  PRIMARY KEY (`numeroLocalidad`, `idGrada`, `idEvento`),
  CONSTRAINT `tipoUsuario_op`
    FOREIGN KEY (`tipoUsuario`)
    REFERENCES `proyecto`.`TiposUsuario` (`tipo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `cliente_op`
    FOREIGN KEY (`idCliente`)
    REFERENCES `proyecto`.`Clientes` (`idCliente`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `grada_op`
    FOREIGN KEY (numeroLocalidad, `idGrada`, idEvento)
    REFERENCES `proyecto`.`LocalidadGradaEvento` (numeroLocalidad,`idGrada`, idEvento)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`PrecioPorGradaEventoyUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`PrecioPorGradaEventoyUsuario` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`PrecioPorGradaEventoyUsuario` (
  `tipoUsuario` VARCHAR(15) NOT NULL,
  `idGrada` INT NOT NULL,
  `idEvento` INT NOT NULL,
  `Precio` DECIMAL(6,2) NULL,
  PRIMARY KEY (`tipoUsuario`, `idGrada`, `idEvento`),
  INDEX `grada_idx` (`idGrada` ASC),
  INDEX `evento_idx` (`idEvento` ASC),
  CONSTRAINT `user_precios`
    FOREIGN KEY (`tipoUsuario`)
    REFERENCES `proyecto`.`TiposUsuario` (`tipo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `asist`
    FOREIGN KEY (`tipoUsuario`, idEvento)
    REFERENCES `proyecto`.`puedenAsistir` (`tipoUsuario`, idEvento)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `grada_precios`
    FOREIGN KEY (`idGrada`, idEvento)
    REFERENCES `proyecto`.`GradaEventos` (`idGrada`, idEvento)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `proyecto`.`puedenAsistir`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `proyecto`.`puedenAsistir` ;

CREATE TABLE IF NOT EXISTS `proyecto`.`puedenAsistir` (
  `idEvento` INT NOT NULL,
  `tipoUsuario` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`idEvento`, `tipoUsuario`),
  INDEX `tipoUser_idx` (`tipoUsuario` ASC),
  CONSTRAINT `evento_asist`
    FOREIGN KEY (`idEvento`)
    REFERENCES `proyecto`.`Eventos` (`idEvento`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `tipoUser_asist`
    FOREIGN KEY (`tipoUsuario`)
    REFERENCES `proyecto`.`TiposUsuario` (`tipo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- Borramos todolos procedemntos se existen
drop procedure if exists sh_estado_localidade;
drop procedure if exists reservar_localidade;
drop procedure if exists anular_reserva;
drop procedure if exists modificar_datos;
drop procedure if exists consultar_datos;





/*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    + ****************************************************************************************************+
    + *                                     PROCEDEMENTOS                                                *+
    + ****************************************************************************************************+
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*/

-- Cambiamos o delimitador a //
delimiter //


-- ********************************************************************************************************
--               Comprobar o estado das localidades dunha determinada grada e evento
-- ********************************************************************************************************

create procedure sh_estado_localidade (in ID_localidade INT, in ID_grada INT, in ID_evento INT)
  begin
-- ----------------------------------------------------------------------------------------------------------
--                    Comprobamos a existencia da combinacion introducida
-- ----------------------------------------------------------------------------------------------------------
    -- Comprobamos que exista o evento
    if((select count(*) from GradaEventos where idEvento = ID_evento) = 0) then
      select 'As entradas para ese evento v√©ndenas na competencia';
    else
      -- Comprobamos que dito evento te√±a a grada solicitada
      if((select count(*) from GradaEventos where idEvento = ID_evento and idGrada = ID_grada) = 0) then
        select 'Pouco vas mirar dende esa grada';
      else
        -- Comprobamos que a localidade exista
        if((select count(*) from GradaEventos, Localidades where GradaEventos.idEvento = ID_evento and GradaEventos.idGrada = ID_grada and GradaEventos.idGrada = Localidades.idGrada and Localidades.numeroLocalidad = ID_localidade) = 0) then
          select 'O estado desa localidade √© \'desaparecida\'';
        else
-- ----------------------------------------------------------------------------------------------------------
--                            Comeza a funcion
-- ----------------------------------------------------------------------------------------------------------
          -- Comprobamos se esta reservada por unha operacion
          if((select count(*) from LocalidadGradaEvento where numeroLocalidad = ID_localidade and idGrada = ID_grada and idEvento = ID_evento) = 1) then
            select idEvento as Evento, idGrada as Grada, numeroLocalidad as Localidade, 'reservada' as estado from LocalidadGradaEvento where numeroLocalidad = ID_localidade and idGrada = ID_grada and idEvento = ID_evento;
          else
          -- Se non obtemos o seu estado xeral
            select ID_evento as Evento, idGrada as Grada,
              numeroLocalidad as Localidade, estado
            from Localidades
            where idGrada =  ID_grada and numeroLocalidad = ID_localidade;
          end if;
        end if;
      end if;
    end if;
  end //


-- ********************************************************************************************************
-- ********************************************************************************************************





-- ********************************************************************************************************
--            Reservar unha localidade, tamen actualiza o estado das localidades
--             se estas estaban reservadas e expirou o seu tempo de validez
-- ********************************************************************************************************

create procedure reservar_localidade(in ID_cliente INT, in tipo_usuario VARCHAR(15), in ID_localidade INT , in ID_grada INT, in ID_evento INT)
  begin



    declare cantidade int unsigned default 0;
    declare estadoE VARCHAR(45) ;
    declare dataHora DATETIME;
    declare estadoL VARCHAR(45);
    declare dataCaducidade DATETIME;

    declare localidade int;
    declare grada int;
    declare evento int;
    declare feito boolean default false;

         -- Cursors pra recoller as localidades reservadas que expiraron
     declare expiracion cursor for
     select numeroLocalidad, idGrada, idEvento from Operaciones where fechaCaducidad < now();
     declare continue handler for not found set feito = true;

-- ----------------------------------------------------------------------------------------------------------
--                    Comprobamos a existencia da combinacion introducida
-- ----------------------------------------------------------------------------------------------------------
   -- Comprobamos que exista o cliente
    if((select count(*) from Clientes where idCliente = ID_cliente) = 0) then
      select 'Non me soas meu';
    else
      -- Comprobamos que o tipo de usuario introducido sexa valido
      if((select count(*) from TiposUsuario where tipo = tipo_usuario) = 0) then
        select 'E ti de quen v√©s sendo?';
      else
        -- Comprobamos que exista o evento
        if((select count(*) from GradaEventos where idEvento = ID_evento) = 0) then
          select 'As entradas para ese evento v√©ndenas na competencia';
        else
          -- Comprobamos que dito evento te√±a a grada solicitada
          if((select count(*) from GradaEventos where idEvento = ID_evento and idGrada = ID_grada) = 0) then
            select 'Pouco vas mirar dende esa grada';
          else
            -- Comprobamos que a localidade exista
            if((select count(*) from GradaEventos, Localidades where GradaEventos.idEvento = ID_evento and GradaEventos.idGrada = ID_grada and GradaEventos.idGrada = Localidades.idGrada and Localidades.numeroLocalidad = ID_localidade) = 0) then
              select 'Eu vendocha pero esa localidade non √© deste recinto';
            else
              start transaction;

              -- ------------------- Actualizacion -----------------------------------------------------
              -- Bucle para actualizar a dispo√±ibel as localidades reservadas que expiraron
                open expiracion;
                bucle : loop
                  fetch expiracion into localidade, grada, evento;

                  if feito = true  then
                    close expiracion;
                    leave bucle;
                  end if;
                   delete from LocalidadGradaEvento where numeroLocalidad = localidade and idGrada = grada and idEvento = evento;
                end loop;

                -- Eliminamos as reservas expiradas
                delete from Operaciones where fechaCaducidad < now();

-- ----------------------------------------------------------------------------------------------------------
--                                Comeza a funcion
-- ----------------------------------------------------------------------------------------------------------
               -- Obtemos o numero de pre-reservas do cliente
                select count(*) into cantidade from Operaciones where idCliente = ID_cliente and tipoOperacion = 'pre-reserva';

                -- Comprobamos que non excedan o numero maximo
                if(cantidade != 5) then
                  -- Comprobamos se o Usuario pode asistir a este evento
                  if(select count(*) from puedenAsistir where idEvento = ID_evento and tipoUsuario = tipo_usuario) then

                    select estado into estadoE from Eventos where idEvento = ID_evento;
                    select limiteReserva into dataHora from Eventos where idEvento = ID_evento;
                    -- Comprobamos se o evento esta en estado aberto e que ainda estemos en tempo de poder reservar
                    if(estadoE = 'abierto' and now() < dataHora) then

                      select Localidades.estado into estadoL
                      from Localidades, GradaEventos
                      where  GradaEventos.idEvento = ID_evento and GradaEventos.idGrada = Localidades.idGrada
                             and Localidades.idGrada = ID_grada and Localidades.numeroLocalidad = ID_localidade;
                      -- Comprobamos que o estado da localidade sexa dispo√±ibel
                      if(estadoL = 'disponible' and ((select count(*) from LocalidadGradaEvento where idEvento = ID_evento and idGrada = ID_grada and numeroLocalidad = ID_localidade)=0)) then
                        -- Obtemos o tempo de caducidade engadindo √° hora actual os minutos de validez que obtemos de Eventos
                        select (now() + interval validez minute) into dataCaducidade from Eventos where idEvento = ID_evento;

                        -- Creamos unha nova LocalidadGradaEvento
                        insert into LocalidadGradaEvento
                        (numeroLocalidad, idGrada, idEvento)
                        values
                        (ID_localidade,ID_grada,ID_evento);
                        -- Creamos unha nova Operacion
                        insert into Operaciones
                        (numeroLocalidad, idGrada, idEvento, idCliente, tipoOperacion, fechaCaducidad, tipoUsuario)
                        values
                        (ID_localidade, ID_grada, ID_evento, ID_cliente, 'pre-reserva', dataCaducidade, tipo_usuario);

                      else
                        select 'Chegas tarde meu, xa √° pillaron';
                      end if;
                    else
                      select 'Pero ti ves a hora que √©, anda e vaite para casa';
                    end if;
                  else
                    select 'Anda raprigo que estos espectaculos non son pra ti';
                  end if;
                else
                  select 'Xa tes espectaculos dabondo, deixa ao resto tam√©n disfrutar';
                end if;
              commit ;
            end if;
          end if;
        end if;
      end if;
    end if;
  end //

-- ********************************************************************************************************
-- ********************************************************************************************************







-- ********************************************************************************************************
--                                Anular unha reserva
-- ********************************************************************************************************
create procedure anular_reserva(in ID_cliente INT, in ID_localidade INT, in ID_grada INT, in ID_evento INT)
  begin
    declare tempoLimite DATETIME;
    declare comenzoFuncion DATETIME;


-- ----------------------------------------------------------------------------------------------------------
--                    Comprobamos a existencia da combinacion introducida
-- ----------------------------------------------------------------------------------------------------------
    if((select count(*) from Clientes where idCliente = ID_usuario) = 0) then
      select 'Non me soas meu';
    else
     if((select count(*) from LocalidadGradaEvento where numeroLocalidad = ID_localidade and idGrada = ID_grada and idEvento = ID_evento) = 0) then
        select 'Esa reserva non existe meu';
      else
-- ----------------------------------------------------------------------------------------------------------
--                            Comeza a funcion
-- ----------------------------------------------------------------------------------------------------------
         select limiteAnulaciones into tempoLimite from Eventos where idEvento = ID_evento;
        select fechaHora into comenzoFuncion from Eventos where idEvento = ID_evento;

        if(now() < comenzoFuncion) then
          if(now() < tempoLimite) then
            delete from Operaciones where idCliente = ID_cliente and idGrada = ID_grada and idEvento = ID_evento and numeroLocalidad = ID_localidade;
            delete from LocalidadGradaEvento where idGrada = ID_grada and idEvento = ID_evento and numeroLocalidad = ID_localidade;
           -- update Localidades set estado = 'disponible' where numeroLocalidad = ID_localidade; Debemos actualizalas?
          else
            select 'Ti marcha pero unha perna vas deixar aqu√≠';
          end if;
        else
          select 'Cres ti que vaste ir sen pagar';
        end if;
      end if;
    end if;
  end //

-- ********************************************************************************************************
-- ********************************************************************************************************







-- ********************************************************************************************************
--        Consultar diferentes datos do usuario e eventos aos que vai asistir
-- ********************************************************************************************************

create procedure consultar_datos(in ID_usuario INT)
  begin

    declare pagado DECIMAL(6,2);
    declare aPagar DECIMAL(6,2);

-- ----------------------------------------------------------------------------------------------------------
--                    Comprobamos a existencia da combinacion introducida
-- ----------------------------------------------------------------------------------------------------------
     if((select count(*) from Clientes where idCliente = ID_usuario) = 0) then
      select 'Non me soas meu';
    else
-- ----------------------------------------------------------------------------------------------------------
--                            Comeza a funcion
-- ----------------------------------------------------------------------------------------------------------
       -- Calculamos o total pagado polo cliente en todolos eventos
      select sum(PrecioPorGradaEventoyUsuario.Precio) into pagado
      from PrecioPorGradaEventoyUsuario, Operaciones
      where Operaciones.idCliente = ID_usuario and (tipoOperacion = 'compra' or tipoOperacion = 'reserva')
      and Operaciones.tipoUsuario = PrecioPorGradaEventoyUsuario.tipoUsuario
      and Operaciones.idGrada = PrecioPorGradaEventoyUsuario.idGrada and Operaciones.idEvento = PrecioPorGradaEventoyUsuario.idEvento;

      -- Calclamos o que debe o cliente polos eventos reservados
      select sum(PrecioPorGradaEventoyUsuario.Precio) into aPagar
      from PrecioPorGradaEventoyUsuario, Operaciones
      where Operaciones.idCliente = ID_usuario and tipoOperacion = 'pre-reserva'
      and Operaciones.tipoUsuario = PrecioPorGradaEventoyUsuario.tipoUsuario
      and Operaciones.idGrada = PrecioPorGradaEventoyUsuario.idGrada and Operaciones.idEvento = PrecioPorGradaEventoyUsuario.idEvento;

      -- Imprimimos informacion sobre o cliente
      select * , pagado as 'Pagado', aPagar as 'A pagar' from Clientes
      where Clientes.idCliente = ID_usuario;

      -- Imprimimos informacion sobre o lugar dos eventos aos que vai asistir o cliente e o estado da operacion
      select Operaciones.numeroLocalidad as 'Localidade', Gradas.nombre as 'Nome da grada',
        Recintos.nombre as 'Nome do recinto', Espectaculos.descripcion as 'Espect√°culo',
        Operaciones.tipoOperacion as 'Operacion'
      from Operaciones, Gradas, Recintos, Eventos, Espectaculos
      where Operaciones.idCliente = ID_usuario and Operaciones.idGrada = Gradas.idGrada
      and Recintos.idRecinto = Gradas.idRecinto and Eventos.idEvento = Operaciones.idEvento
      and Espectaculos.idEspectaculo = Eventos.idEspectaculo order by Espectaculos.descripcion;

      -- Imprimimos infromacion sobre os espectaculos aos que vai asistir o cliente
      select distinct Eventos.fechaHora as Inicio, Espectaculos.descripcion as 'Espect√°culo',
        Participantes.Nombre as 'Participantes'
      from Eventos, Espectaculos, Participa, Participantes, Operaciones
      where Operaciones.idCliente = ID_usuario
      and Eventos.idEvento = Operaciones.idEvento and Espectaculos.idEspectaculo = Eventos.idEspectaculo
      and Participa.idEspectaculo = Espectaculos.idEspectaculo and Participantes.idParticipante = Participa.idParticipante
      order by Espectaculos.descripcion;
    end if;
  end//

-- ********************************************************************************************************
-- ********************************************************************************************************








-- ********************************************************************************************************
--                                  Modificar os datos do usuario
-- ********************************************************************************************************

create procedure modificar_datos(in ID_usuario INT, in nome VARCHAR(50), in apelidos VARCHAR(45), in conta VARCHAR(45))
  begin
-- ----------------------------------------------------------------------------------------------------------
--                    Comprobamos a existencia da combinacion introducida
-- ----------------------------------------------------------------------------------------------------------
    if((select count(*) from Clientes where idCliente = ID_usuario) = 0) then
      select 'Non me soas meu';
    else
-- ----------------------------------------------------------------------------------------------------------
--                            Comeza a funcion
-- ----------------------------------------------------------------------------------------------------------
      update Clientes set nombre = nome, apellidos = apelidos, datosBancarios = conta where idCliente = ID_usuario;
    end if;
  end //

-- ********************************************************************************************************
-- ********************************************************************************************************


delimiter  ;



INSERT INTO Espectaculos(descripcion,tipo) values
('Festival MadCool en Madrid','Musica'),
('El Cascanueces en el Teatro Real','Teatro'),
('Festival NOS Alive en Lisboa','Musica');

INSERT INTO Participantes(Nombre) values
('Radiohead'),
('Banda de teatro espa√±ola'),
('Rufus T. Firefly'),
('Glass Animals'),
('Arctic Monkeys'),
('Black Keys');

INSERT INTO Participa values
(1,1),
(2,2),
(3,1),
(4,2),
(5,3),
(5,1);

INSERT INTO TiposUsuario values
('Beb√©'),('Infantil'),('Adulto'),('Jubilado'),('Parado');

INSERT INTO Recintos(nombre) values
('Espacio Mad Cool'),
('Oeiras'),
('Teatro Real'),
('Wizink Center');

INSERT INTO Gradas(nombre, numMaximoAsientos, idRecinto) values
('MadCool_alta', 30, 1),
('MadCool_suelo' ,40, 1),
('MadCool_media', 10, 1),
('teatro_a', 30, 3),
('teatro_b' ,40, 3),
('teatro_c', 10, 3),
('NOS_alta', 30, 2),
('NOS_suelo' ,40, 2),
('NOS_media', 10, 2);

INSERT INTO Eventos(estado, fechaHora, limiteReserva, limiteAnulaciones,validez, idEspectaculo) values
('abierto','2018-06-18 10:34:09', '2018-05-18 10:34:09', '2018-05-18 10:34:09', 600, 1),
('abierto','2018-06-18 10:34:09', '2018-05-18 10:34:09', '2018-05-18 10:34:09', 600, 2),
('finalizado','2018-06-18 10:34:09', '2018-05-18 10:34:09', '2018-05-18 10:34:09', 600, 3);

INSERT INTO Clientes(nombre, apellidos, datosBancarios) values
('Diego', 'Albo Mart√≠nez', 'ES65 5646 1548 1954'),
('Aitor', 'Gonzalez Mouri√±o', 'ES65 1948 1548 1954'),
('Pedro', 'Alonso Doval', 'ES65 1564 4861 5648');

INSERT INTO GradaEventos(idGrada, idEvento) values
(1,1),
(2,1),
(3,1),
(4,2),
(5,2),
(6,2),
(7,3),
(8,3),
(9,3);

INSERT INTO Localidades(idGrada, numeroLocalidad, estado, deteriorado) values
(1,1,'disponible',0),
(1,2,'disponible',0),
(1,3,'disponible',0),
(1,4,'disponible',0),
(1,5,'disponible',0),
(1,6,'disponible',0),
(1,7,'disponible',0),
(1,8,'disponible',0),
(1,9,'disponible',0),
(1,10,'disponible',0),
(2,1,'disponible', 0),
(2,2,'disponible', 0),
(2,3,'disponible', 0),
(2,4,'disponible', 0),
(2,5,'disponible', 0),
(2,6,'disponible', 0),
(2,7,'disponible', 0),
(2,8,'reservada',0),
(2,9,'reservada',0),
(2,10, null,1),
(3,21,'disponible',0),
(3,22,'disponible',0),
(3,23,'disponible',0),
(3,24,'disponible',0),
(3,25,'disponible',0),
(3,26,'disponible',0),
(3,27,'disponible',0),
(3,28,'disponible',0),
(3,29,'disponible',0),
(3,30,'disponible',0),
(4,41,'disponible', 0),
(4,42,'disponible', 0),
(4,43,'disponible', 0),
(4,44,'disponible', 0),
(4,45,'disponible', 0),
(4,46,'disponible', 0),
(4,47,'disponible', 0),
(4,48,'reservada',0),
(4,49,'reservada',0),
(4,50, null,1);

INSERT INTO LocalidadGradaEvento(numeroLocalidad, idGrada, idEvento) values
(21,3,1),
(45,4,2),
(5,2,1);

INSERT INTO Operaciones(numeroLocalidad, idGrada, idEvento, idCliente, tipoOperacion, fechaCaducidad, tipoUsuario) values
(21,3,1,1,'compra', null, 'Adulto'),
(45,4,2,3,'reserva', '2018-06-18 10:34:09', 'Jubilado'),
(5,2,1,2,'pre-reserva', '2018-06-18 22:34:09', 'Parado');

INSERT INTO  puedenAsistir(idEvento, tipoUsuario) values
(1,'Jubilado'),
(1,'Parado'),
(1,'Adulto'),
(2,'Jubilado'),
(2,'Parado'),
(2,'Adulto'),
(3,'Jubilado'),
(3,'Parado'),
(3,'Adulto'),
(3,'Infantil'),
(3,'Beb√©');


INSERT INTO PrecioPorGradaEventoyUsuario(tipoUsuario,idGrada, idEvento, Precio) values
('Jubilado',3,1,12.75),
('Parado',3,1,11.50),
('Adulto',3,1,20.55),
/*('Beb√©',4,2,0.75),*/
('Parado',4,2,11.50),
('Adulto',4,2,18.80),
('Jubilado',4,2,12.75),
('Parado',7,3,11.50),
('Adulto',7,3,20.55),
('Beb√©',7,3,0.75),
('Infantil',7,3,11.50);





